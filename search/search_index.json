{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bullet Platform \u00b6","title":"Introduction"},{"location":"#bullet-platform","text":"","title":"Bullet Platform"},{"location":"changelog/","text":"Changelog \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"terminology/","text":"Test \u00b6 This document contains concise explanations of important terminology found in the event issuer. For more specific information and use cases, read relevant documentation found on the event issuer Wiki. Term Definition Consumer An entity either internal or external to Bane NOR which uses Event Issuer to consume data from the Bane NOR Event Backbone Producer An entity either internal or external to Bane NOR which uses Event Issuer to produce data to the Bane NOR Event Backbone Subscription A generic name used in Event Issuer to explain an active consumer within Event Issuer which continuously fetches data from the Bane NOR Event Backbone and forwards it to a specified webhook endpoint Tenant A Top-level entity representing organizations or more top-level structures. All principals, policies and subscriptions are linked to a tenant although some principals can also manage the tenant Principal A Principal is an object that represents a user, group, or service account. In the initial release mainly service accounts will be supported. Policy A Policy refers to authorization policies that determine which actions principals can take within the Event Issuer eco-system. Common policies would be principal policies for tenants, subscriptions, and events determining their possibility to create new subscriptions, list out subscriptions, delete active subscriptions, produce data, etc. API Terminology \u00b6 Term Definition Authentication The process of verifying the identity of a user or system attempting to access an API. Authorization Determines what actions an authenticated user or system can perform. Endpoint A specific URL where the API can receive requests, corresponding to a unique function or resource. Payload The data transmitted in an API request or response in JSON. Status Codes HTTP codes that indicate the result of an API request, such as 200 (success) or 404 (resource not found). Webhook A method for sending real-time data from the API to another system, triggered by an event. Access Token A short-lived token used to access protected API resources, issued during authentication.","title":"Terminology"},{"location":"terminology/#test","text":"This document contains concise explanations of important terminology found in the event issuer. For more specific information and use cases, read relevant documentation found on the event issuer Wiki. Term Definition Consumer An entity either internal or external to Bane NOR which uses Event Issuer to consume data from the Bane NOR Event Backbone Producer An entity either internal or external to Bane NOR which uses Event Issuer to produce data to the Bane NOR Event Backbone Subscription A generic name used in Event Issuer to explain an active consumer within Event Issuer which continuously fetches data from the Bane NOR Event Backbone and forwards it to a specified webhook endpoint Tenant A Top-level entity representing organizations or more top-level structures. All principals, policies and subscriptions are linked to a tenant although some principals can also manage the tenant Principal A Principal is an object that represents a user, group, or service account. In the initial release mainly service accounts will be supported. Policy A Policy refers to authorization policies that determine which actions principals can take within the Event Issuer eco-system. Common policies would be principal policies for tenants, subscriptions, and events determining their possibility to create new subscriptions, list out subscriptions, delete active subscriptions, produce data, etc.","title":"Test"},{"location":"terminology/#api-terminology","text":"Term Definition Authentication The process of verifying the identity of a user or system attempting to access an API. Authorization Determines what actions an authenticated user or system can perform. Endpoint A specific URL where the API can receive requests, corresponding to a unique function or resource. Payload The data transmitted in an API request or response in JSON. Status Codes HTTP codes that indicate the result of an API request, such as 200 (success) or 404 (resource not found). Webhook A method for sending real-time data from the API to another system, triggered by an event. Access Token A short-lived token used to access protected API resources, issued during authentication.","title":"API Terminology"},{"location":"apis/v1/","text":"","title":"v1"},{"location":"user-guides/cloudevents/","text":"TESTER \u00b6","title":"TESTER"},{"location":"user-guides/cloudevents/#tester","text":"","title":"TESTER"},{"location":"user-guides/debugging/","text":"Debugging subscriptions \u00b6 To make the event issuer more self-service, the integration team has set up multiple solutions to allow for as much debugging as possible on the client side before a member of the integration team has to get involved. The main methods recommended for debugging by the integration team are: Checking subscription status Debugging by checking subscription status \u00b6 The Event Issuer has built-in Error Reporting linked to the GetSubscription methods. This means that if an error has occurred on your subscription, you can call the GetSubscription method which in case an error has occurred, will return an error report with useful debug information such as: A relevant Error Message A Trace ID for tracking the error in Grafana A HTTP status code A timestamp for when the error occurred An example of how this looks in the Bruno API Client is showcased below: (Added when functionality is added)","title":"Debugging subscriptions"},{"location":"user-guides/debugging/#debugging-subscriptions","text":"To make the event issuer more self-service, the integration team has set up multiple solutions to allow for as much debugging as possible on the client side before a member of the integration team has to get involved. The main methods recommended for debugging by the integration team are: Checking subscription status","title":"Debugging subscriptions"},{"location":"user-guides/debugging/#debugging-by-checking-subscription-status","text":"The Event Issuer has built-in Error Reporting linked to the GetSubscription methods. This means that if an error has occurred on your subscription, you can call the GetSubscription method which in case an error has occurred, will return an error report with useful debug information such as: A relevant Error Message A Trace ID for tracking the error in Grafana A HTTP status code A timestamp for when the error occurred An example of how this looks in the Bruno API Client is showcased below: (Added when functionality is added)","title":"Debugging by checking subscription status"},{"location":"user-guides/faq/","text":"Q: I regenerated my API keys, but i no longer have access Q: I am not allowed to produce an event/topic with event issuer, even though my confluent user has access Click on the questions to reveal the answer. If you cant find the answer you are looking for, please let us know by contacting integrasjonsteamet@banenor.no . Q: I regenerated my API keys, but i no longer have access \u00b6 When you regenerate your API Keys in the API portal, you get new API-keys that are usable for the Event-issuer API found in APIM. However, the new keys are now no longer linked to the policy in Event Issuers Authorization Service, meaning that it will stop you when you try to complete the same actions as before such as CreateSubscription or ProduceEvent. To fix this issue, please get in touch with a member of the integration team. Q: I am not allowed to produce an event/topic with event issuer, even though my confluent user has access \u00b6 When you try to produce data for an event or topic that you have a confluent user for, it will usually allow you to complete the requested action. However, Event-Issuer has an extra authorization layer that also validates that your API-Subscription Keys are allowed to produce data for the specified event. To also get this access, please contact a member of the integration team.","title":"Faq"},{"location":"user-guides/faq/#q-i-regenerated-my-api-keys-but-i-no-longer-have-access","text":"When you regenerate your API Keys in the API portal, you get new API-keys that are usable for the Event-issuer API found in APIM. However, the new keys are now no longer linked to the policy in Event Issuers Authorization Service, meaning that it will stop you when you try to complete the same actions as before such as CreateSubscription or ProduceEvent. To fix this issue, please get in touch with a member of the integration team.","title":"Q: I regenerated my API keys, but i no longer have access"},{"location":"user-guides/faq/#q-i-am-not-allowed-to-produce-an-eventtopic-with-event-issuer-even-though-my-confluent-user-has-access","text":"When you try to produce data for an event or topic that you have a confluent user for, it will usually allow you to complete the requested action. However, Event-Issuer has an extra authorization layer that also validates that your API-Subscription Keys are allowed to produce data for the specified event. To also get this access, please contact a member of the integration team.","title":"Q: I am not allowed to produce an event/topic with event issuer, even though my confluent user has access"},{"location":"user-guides/getting-started/","text":"The guide contains a quick introduction to how one can get access to and start using the Event Issuer service in Bane NOR. Getting access Onboarding Get API Access Using Event Issuer Starting your first subscription Example Bruno Request Header Body Producing your first message Example Bruno Request Header Body Getting access \u00b6 Onboarding \u00b6 The first step in getting access to the event-issuer service is an onboarding meeting with the integration platform. Here the goal is to map out the thought-out use case/cases for your team and why the Event Issuer would be a relevant solution. To start this onboarding process, please contact the integration team on our e-mail: integrasjonsteamet@banenor.no If you are already onboarded and have been allowed to use the Event Issuer Service, the first step below (Get API Access) can be ignored. Get API Access \u00b6 After permission has been given to use the Event Issuer service, the next step is to get API access to the event-issuer API which is available through the integration team API Management (APIM) instance. For the integration team to be able to provide you with API keys you first have to at least once log into the APIM developer portal relevant to the environment you want to use the Event Issuer in. Here is a list showcasing the possible environments: For the staging environment: APIM Portal Staging For the production environment: APIM Portal Production The staging environment can be used to consume data from dev topics. The reason for this is that our dev instance will not necessarily be stable for public use and as such we will serve both dev and staging with the staging event issuer for those that need to work with their own development. Once logged in to the developer portal for the first time, you will be visible with your e-mail address and the integration team will be able to provide you with subscription keys. Using Event Issuer \u00b6 As mentioned in the getting access chapter of this document, the Event Issuer is available through an API present in each environment instance of APIM meaning that all available endpoints and their descriptions can be seen there. The API documentation is also available on GitHub using Redocly rendering which can be easier to read. The document can be seen here: GitHub version of API This means that if you prefer, you can simply test sending API requests using for example Bruno based on the API documentation. Otherwise, here is a showcase of some Bruno requests that can help you get started with links to relevant repositories. Starting your first subscription \u00b6 Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can create your first subscription. To create a subscription, you must use the Create Subscription method towards the event-issuers subscription Endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Create Subscription Method Example Bruno Request \u00b6 An example request for this method can be found in our event issuer repository in our bruno folder or seen in the figure below using the Bruno API client: Header \u00b6 The only required header per writing is the API key for the event-issuer API found on your account in the developer portal Body \u00b6 The content of the request are just for examples. For more concrete information on all subscription body options. Check out the subscriptions page Producing your first message \u00b6 Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can produce your first message towards the Bane NOR Event Backbone which as per writing is Confluent Kafka. To produce a message, you must use either the Produce Cloud Event method or Produce batch of Cloud Events method found under the produce endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Produce Cloud Event Method Example Bruno Request \u00b6 An example request for this method can be found in our event issuer repository in the bruno folder or seen in the figure below using the Bruno API client: Header \u00b6 The only required header per writing is the API key for the event-issuer API found on your account in the developer portal Body \u00b6 The content of the request are just for examples","title":"Getting started"},{"location":"user-guides/getting-started/#getting-access","text":"","title":"Getting access"},{"location":"user-guides/getting-started/#onboarding","text":"The first step in getting access to the event-issuer service is an onboarding meeting with the integration platform. Here the goal is to map out the thought-out use case/cases for your team and why the Event Issuer would be a relevant solution. To start this onboarding process, please contact the integration team on our e-mail: integrasjonsteamet@banenor.no If you are already onboarded and have been allowed to use the Event Issuer Service, the first step below (Get API Access) can be ignored.","title":"Onboarding"},{"location":"user-guides/getting-started/#get-api-access","text":"After permission has been given to use the Event Issuer service, the next step is to get API access to the event-issuer API which is available through the integration team API Management (APIM) instance. For the integration team to be able to provide you with API keys you first have to at least once log into the APIM developer portal relevant to the environment you want to use the Event Issuer in. Here is a list showcasing the possible environments: For the staging environment: APIM Portal Staging For the production environment: APIM Portal Production The staging environment can be used to consume data from dev topics. The reason for this is that our dev instance will not necessarily be stable for public use and as such we will serve both dev and staging with the staging event issuer for those that need to work with their own development. Once logged in to the developer portal for the first time, you will be visible with your e-mail address and the integration team will be able to provide you with subscription keys.","title":"Get API Access"},{"location":"user-guides/getting-started/#using-event-issuer","text":"As mentioned in the getting access chapter of this document, the Event Issuer is available through an API present in each environment instance of APIM meaning that all available endpoints and their descriptions can be seen there. The API documentation is also available on GitHub using Redocly rendering which can be easier to read. The document can be seen here: GitHub version of API This means that if you prefer, you can simply test sending API requests using for example Bruno based on the API documentation. Otherwise, here is a showcase of some Bruno requests that can help you get started with links to relevant repositories.","title":"Using Event Issuer"},{"location":"user-guides/getting-started/#starting-your-first-subscription","text":"Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can create your first subscription. To create a subscription, you must use the Create Subscription method towards the event-issuers subscription Endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Create Subscription Method","title":"Starting your first subscription"},{"location":"user-guides/getting-started/#example-bruno-request","text":"An example request for this method can be found in our event issuer repository in our bruno folder or seen in the figure below using the Bruno API client:","title":"Example Bruno Request"},{"location":"user-guides/getting-started/#header","text":"The only required header per writing is the API key for the event-issuer API found on your account in the developer portal","title":"Header"},{"location":"user-guides/getting-started/#body","text":"The content of the request are just for examples. For more concrete information on all subscription body options. Check out the subscriptions page","title":"Body"},{"location":"user-guides/getting-started/#producing-your-first-message","text":"Once your user has gotten access to the event-issuer API, and a tenant for your organization has been created with the correct access policies, you can produce your first message towards the Bane NOR Event Backbone which as per writing is Confluent Kafka. To produce a message, you must use either the Produce Cloud Event method or Produce batch of Cloud Events method found under the produce endpoint. The API definition for this can be seen on the available API found in our GitHub documentation here: Produce Cloud Event Method","title":"Producing your first message"},{"location":"user-guides/getting-started/#example-bruno-request_1","text":"An example request for this method can be found in our event issuer repository in the bruno folder or seen in the figure below using the Bruno API client:","title":"Example Bruno Request"},{"location":"user-guides/getting-started/#header_1","text":"The only required header per writing is the API key for the event-issuer API found on your account in the developer portal","title":"Header"},{"location":"user-guides/getting-started/#body_1","text":"The content of the request are just for examples","title":"Body"},{"location":"user-guides/producing/","text":"Producing \u00b6 (For concrete examples, check out our bruno collection ) Event Issuer can be used to produce new events into Bane NOR. This is not openly available and an agreement with Bane NOR is needed to be able to produce data. The correct access rights for producing will be given on an agreement basis. Bane NOR uses the Cloud Event specification for producing events and supports producing both single events and the possibility of sending batches of events. Cloud Events has created SDKs for different languages that can be found on the main page under the SDKs in the menu. The Event Issuer has two API endpoints for this: {tenantId}/produce {tenantId}/produce/batch Production modes \u00b6 As mentioned, Event Issuer supports multiple methods for producing data into Bane NOR, both single events and batches. Including this, Event Issuer also supports two different Cloud Event structures, Binary and Structured mode showcased in the chapters below. At the moment only data produced with the JSON format is supported, but other content types can be added later based on user needs. Binary \u00b6 In binary mode, the cloud event headers are sent as part of the HTTP header values by using the ce- prefix. For more information about this see the binary mode documented in the specification. POST event-issuer/v1/{tenantId}/produce HTTP / 1.1 Host : api.banenor.com ce-specversion : 1.0 ce-type : cloud.domain.sub-domain.event.v1 ce-time : 2018-04-05T03:56:24Z ce-id : 1234-1234-1234 ce-source : /mycontext/subcontext .... further attributes ... Content-Type : application/json; charset=utf-8 Content-Length : nnnn { ... applica t io n da ta ... } Structured \u00b6 With structured mode, the cloud event headers are sent as part of the HTTP payload/body data. For more information about this see the structured mode documented in the specification. POST event-issuer/v1/{tenantId}/produce HTTP / 1.1 Host : api.banenor.com Content-Type : application/cloudevents+json; charset=utf-8 Content-Length : nnnn { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v1\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } } Batch \u00b6 With batch mode, a list of cloud events can be sent in one HTTP request to reduce the amount of required API calls. The example showcased here applies structured mode: POST event-issuer/v1/{tenantId}/produce/batch HTTP / 1.1 Host : api.banenor.com Content-Type : application/cloudevents-batch+json; charset=utf-8 Content-Length : nnnn [ { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v1\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } }, { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v2\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } } ]","title":"Producing"},{"location":"user-guides/producing/#producing","text":"(For concrete examples, check out our bruno collection ) Event Issuer can be used to produce new events into Bane NOR. This is not openly available and an agreement with Bane NOR is needed to be able to produce data. The correct access rights for producing will be given on an agreement basis. Bane NOR uses the Cloud Event specification for producing events and supports producing both single events and the possibility of sending batches of events. Cloud Events has created SDKs for different languages that can be found on the main page under the SDKs in the menu. The Event Issuer has two API endpoints for this: {tenantId}/produce {tenantId}/produce/batch","title":"Producing"},{"location":"user-guides/producing/#production-modes","text":"As mentioned, Event Issuer supports multiple methods for producing data into Bane NOR, both single events and batches. Including this, Event Issuer also supports two different Cloud Event structures, Binary and Structured mode showcased in the chapters below. At the moment only data produced with the JSON format is supported, but other content types can be added later based on user needs.","title":"Production modes"},{"location":"user-guides/producing/#binary","text":"In binary mode, the cloud event headers are sent as part of the HTTP header values by using the ce- prefix. For more information about this see the binary mode documented in the specification. POST event-issuer/v1/{tenantId}/produce HTTP / 1.1 Host : api.banenor.com ce-specversion : 1.0 ce-type : cloud.domain.sub-domain.event.v1 ce-time : 2018-04-05T03:56:24Z ce-id : 1234-1234-1234 ce-source : /mycontext/subcontext .... further attributes ... Content-Type : application/json; charset=utf-8 Content-Length : nnnn { ... applica t io n da ta ... }","title":"Binary"},{"location":"user-guides/producing/#structured","text":"With structured mode, the cloud event headers are sent as part of the HTTP payload/body data. For more information about this see the structured mode documented in the specification. POST event-issuer/v1/{tenantId}/produce HTTP / 1.1 Host : api.banenor.com Content-Type : application/cloudevents+json; charset=utf-8 Content-Length : nnnn { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v1\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } }","title":"Structured"},{"location":"user-guides/producing/#batch","text":"With batch mode, a list of cloud events can be sent in one HTTP request to reduce the amount of required API calls. The example showcased here applies structured mode: POST event-issuer/v1/{tenantId}/produce/batch HTTP / 1.1 Host : api.banenor.com Content-Type : application/cloudevents-batch+json; charset=utf-8 Content-Length : nnnn [ { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v1\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } }, { \"specversion\" : \"1.0\" , \"type\" : \"cloud.domain.sub-domain.event.v2\" , ... furt her a ttr ibu tes omi tte d ... \"data\" : { ... applica t io n da ta ... } } ]","title":"Batch"},{"location":"user-guides/subscriptions/","text":"Subscriptions \u00b6 (For concrete examples, check out our bruno collection ) Subscriptions are the main mechanism for getting real-time events from the Bane NOR event backbone. The subscription is a reference to an application that wants events to be sent to a webhook endpoint. The subscriber can configure the authentication towards the endpoint in addition to an API key if that is needed. Webhook endpoint \u00b6 The endpoint can receive the event payload with additional metadata by using the CloudEvents HTTP binding. Cloud events are sent by using the HTTP Protocol Binding . This means that the CloudEvents are part of the HTTP headers. Info Bane NOR is working on standardizing event messages around the cloud event specification which means that some event types might be missing from the cloud event headers. Authenticating subscriptions \u00b6 Some users require authentication and authorization to be able to communicate with their APIs. For this purpose, different types can be configured for the subscription. The following are supported: No authentication API Key Basicauth OAuth 2.0 The idea is that the end users or services can configure the needed information to authenticate towards the webhook endpoint and update the configuration as needed. API Key \u00b6 API Key is something that is created when subscribing to certain APIs or products. The key can be used both as a token for an API Management system to check if and how the request should be handled, and in monitoring situations to check that the number of requests is within for example rate limits set by the API owner. Event Issuer supports the use of an API Key configuration which can be configured with one of the other authentication mechanisms if both are needed. Basic Auth \u00b6 Basic authentication with a username and password is supported as a simple mechanism for getting access to a webhook. Example \u00b6 { \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"BasicAuth\" , \"username\" : \"systemx\" , \"password\" : \"use-a-secure-password\" } } Identity Providers \u00b6 An identity provider (IdP) is a system that creates, stores and manages digital identities. The IdP can either directly authenticate the user or can provide authentication services to third-party service providers (apps, websites, or other digital services). The following IdPs are supported for fetching OAuth2.0 tokens: Maskinporten Entra ID The following diagram shows the system context for communication with an IdP. Maskinporten \u00b6 Maskinporten is a Norwegian solution to add authorizations between companies that need to be able to share data between systems or in other words machine-to-machine. Example \u00b6 { \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"Maskinporten\" , \"scopes\" : [ \"company:apix:write\" ] } } Info To be able to use Maskinporten the integration team at Bane NOR needs to be contacted to link the Maskinporten integration to be able to use the correct scope from the API vendor. For companies that use a token exchange where the Maskinporten token needs to be exchanged with a company-specific token, contact the integration team with the specific needs. This will then be added to the backlog and implemented as a tenant-specific solution for those needs. Entra ID \u00b6 Entra ID is the standard OAuth authentication mechanism used in Azure. To be able to use this with Event Issuer subscriptions, we will need to do a server-to-server interaction that runs in the background, without immediate interaction with a user. This is done through an OAuth client-credential flow that grants permissions directly to the application itself by an administrator. Entra Id also uses the JWT Grant mechanisms to obtain the access_token for requests. These are the configuration options for Entra. // With client secret { \"AuthUrl\" : \"https://login.microsoftonline.com/\" , \"TenantId\" : \"[Enter here the tenantID or domain name for your Azure AD tenant]\" , \"ClientId\" : \"[Enter here the ClientId for your application]\" , \"ClientSecret\" : \"string\" , \"scope\" : \"string\" , \"grant_type\" : \"client_credentials\" } // With a certificate or federated credential { \"AuthUrl\" : \"https://login.microsoftonline.com/\" , \"TenantId\" : \"[Enter here the tenantID or domain name for your Azure AD tenant]\" , \"ClientId\" : \"[Enter here the ClientId for your application]\" , \"client_assertion_type\" : \"The value must be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\" , \"client_assertion\" : \"JSON web token needed to sign with the certificate\" , \"scope\" : \"string\" , \"grant_type\" : \"client_credentials\" } Example \u00b6 { \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"EntraId\" , \"url\" : \"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token\" , \"clientId\" : \"d0a3da30-8936-4800-9c23-37c1b86d8a63\" , \"clientSecret\" : \"7hzQ3bPSNThb7Cgem+a+w2RqLMKr*LqCSALYco-zQyi4ueUnVo\" , \"scopes\" : [ \"apix:write\" ] } } Client credentials flow \u00b6 This diagram describes how authentication works between background services. For Event-Issuer the flow would look like this. This flow assumes that an admin has created an app registration for the subscription and given it the correct permissions to the Web API in question. sequenceDiagram participant Event Issuer Subscription participant EntraId participant Web API Event Issuer Subscription->>EntraId: Request token EntraId-->>Event Issuer Subscription: Returns token loop Until the consumer has caught up to the offset Event Issuer Subscription->>Web API: Posts data to API with a token in Authorization header end Web API->>Web API: Validates token alt Success Web API-->>Event Issuer Subscription: 200 ok else Failed Web API -->>Event Issuer Subscription: 401, 403, 404, 501, etc. end Access control \u00b6 Microsoft provides two options to grant access to applications: access control lists and application permissions . Access control lists \u00b6 Access control lists enforce authorization based on a list of application IDs that it knows and grants a specific level of access to. When the relevant resource receives a token, it decodes it and checks it against the list of authorized clients. Application permissions \u00b6 For data owned by organizations, Microsoft recommends using application permissions. To use application roles with your API, you need to expose the app roles in the API's app registration, and then configure the required roles in your client's (the subscription) app registration. The user who creates a subscription will also have to create an app registration in their organization that they provide the necessary permissions. Create Subscription \u00b6 The following command can be used to create a subscription that uses an API key and basic authentication. curl -H \"Ocp-Apim-Subscription-Key: ApiKey\" https://<bane-nor-api-endpoint>/event-issuer/v1alpha/{tenantId}/subscriptions -d '{\"applicationId\": \"my-application\", \"event\": \"event-name\", \"URL\": \"https://my-endpoint.com/events}, \"apiKey\": { \"header\": \"Ocp-Apim-Subscription-Key\", \"key\": \"API-key\" }, \"authentication\": { \"username\": \"user1\", \"password\": \"my-secure-password\" }' If only an API key is needed don't set the authentication and and only the apiKey section.","title":"Subscriptions"},{"location":"user-guides/subscriptions/#subscriptions","text":"(For concrete examples, check out our bruno collection ) Subscriptions are the main mechanism for getting real-time events from the Bane NOR event backbone. The subscription is a reference to an application that wants events to be sent to a webhook endpoint. The subscriber can configure the authentication towards the endpoint in addition to an API key if that is needed.","title":"Subscriptions"},{"location":"user-guides/subscriptions/#webhook-endpoint","text":"The endpoint can receive the event payload with additional metadata by using the CloudEvents HTTP binding. Cloud events are sent by using the HTTP Protocol Binding . This means that the CloudEvents are part of the HTTP headers. Info Bane NOR is working on standardizing event messages around the cloud event specification which means that some event types might be missing from the cloud event headers.","title":"Webhook endpoint"},{"location":"user-guides/subscriptions/#authenticating-subscriptions","text":"Some users require authentication and authorization to be able to communicate with their APIs. For this purpose, different types can be configured for the subscription. The following are supported: No authentication API Key Basicauth OAuth 2.0 The idea is that the end users or services can configure the needed information to authenticate towards the webhook endpoint and update the configuration as needed.","title":"Authenticating subscriptions"},{"location":"user-guides/subscriptions/#api-key","text":"API Key is something that is created when subscribing to certain APIs or products. The key can be used both as a token for an API Management system to check if and how the request should be handled, and in monitoring situations to check that the number of requests is within for example rate limits set by the API owner. Event Issuer supports the use of an API Key configuration which can be configured with one of the other authentication mechanisms if both are needed.","title":"API Key"},{"location":"user-guides/subscriptions/#basic-auth","text":"Basic authentication with a username and password is supported as a simple mechanism for getting access to a webhook.","title":"Basic Auth"},{"location":"user-guides/subscriptions/#example","text":"{ \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"BasicAuth\" , \"username\" : \"systemx\" , \"password\" : \"use-a-secure-password\" } }","title":"Example"},{"location":"user-guides/subscriptions/#identity-providers","text":"An identity provider (IdP) is a system that creates, stores and manages digital identities. The IdP can either directly authenticate the user or can provide authentication services to third-party service providers (apps, websites, or other digital services). The following IdPs are supported for fetching OAuth2.0 tokens: Maskinporten Entra ID The following diagram shows the system context for communication with an IdP.","title":"Identity Providers"},{"location":"user-guides/subscriptions/#maskinporten","text":"Maskinporten is a Norwegian solution to add authorizations between companies that need to be able to share data between systems or in other words machine-to-machine.","title":"Maskinporten"},{"location":"user-guides/subscriptions/#example_1","text":"{ \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"Maskinporten\" , \"scopes\" : [ \"company:apix:write\" ] } } Info To be able to use Maskinporten the integration team at Bane NOR needs to be contacted to link the Maskinporten integration to be able to use the correct scope from the API vendor. For companies that use a token exchange where the Maskinporten token needs to be exchanged with a company-specific token, contact the integration team with the specific needs. This will then be added to the backlog and implemented as a tenant-specific solution for those needs.","title":"Example"},{"location":"user-guides/subscriptions/#entra-id","text":"Entra ID is the standard OAuth authentication mechanism used in Azure. To be able to use this with Event Issuer subscriptions, we will need to do a server-to-server interaction that runs in the background, without immediate interaction with a user. This is done through an OAuth client-credential flow that grants permissions directly to the application itself by an administrator. Entra Id also uses the JWT Grant mechanisms to obtain the access_token for requests. These are the configuration options for Entra. // With client secret { \"AuthUrl\" : \"https://login.microsoftonline.com/\" , \"TenantId\" : \"[Enter here the tenantID or domain name for your Azure AD tenant]\" , \"ClientId\" : \"[Enter here the ClientId for your application]\" , \"ClientSecret\" : \"string\" , \"scope\" : \"string\" , \"grant_type\" : \"client_credentials\" } // With a certificate or federated credential { \"AuthUrl\" : \"https://login.microsoftonline.com/\" , \"TenantId\" : \"[Enter here the tenantID or domain name for your Azure AD tenant]\" , \"ClientId\" : \"[Enter here the ClientId for your application]\" , \"client_assertion_type\" : \"The value must be set to urn:ietf:params:oauth:client-assertion-type:jwt-bearer.\" , \"client_assertion\" : \"JSON web token needed to sign with the certificate\" , \"scope\" : \"string\" , \"grant_type\" : \"client_credentials\" }","title":"Entra ID"},{"location":"user-guides/subscriptions/#example_2","text":"{ \"applicationId\" : \"application1\" , \"eventName\" : \"cloud.open.operational.train-arrived-at-station.v1\" , \"url\" : \"https://test.no/test\" , \"apiKey\" : { \"header\" : \"Ocp-Apim-Subscription-Key\" , \"key\" : \"jnfdi923r8fnaszy12orf98032nrcn7u982\" }, \"authentication\" : { \"type\" : \"EntraId\" , \"url\" : \"https://login.microsoftonline.com/{tenantId}/oauth2/v2.0/token\" , \"clientId\" : \"d0a3da30-8936-4800-9c23-37c1b86d8a63\" , \"clientSecret\" : \"7hzQ3bPSNThb7Cgem+a+w2RqLMKr*LqCSALYco-zQyi4ueUnVo\" , \"scopes\" : [ \"apix:write\" ] } }","title":"Example"},{"location":"user-guides/subscriptions/#client-credentials-flow","text":"This diagram describes how authentication works between background services. For Event-Issuer the flow would look like this. This flow assumes that an admin has created an app registration for the subscription and given it the correct permissions to the Web API in question. sequenceDiagram participant Event Issuer Subscription participant EntraId participant Web API Event Issuer Subscription->>EntraId: Request token EntraId-->>Event Issuer Subscription: Returns token loop Until the consumer has caught up to the offset Event Issuer Subscription->>Web API: Posts data to API with a token in Authorization header end Web API->>Web API: Validates token alt Success Web API-->>Event Issuer Subscription: 200 ok else Failed Web API -->>Event Issuer Subscription: 401, 403, 404, 501, etc. end","title":"Client credentials flow"},{"location":"user-guides/subscriptions/#access-control","text":"Microsoft provides two options to grant access to applications: access control lists and application permissions .","title":"Access control"},{"location":"user-guides/subscriptions/#access-control-lists","text":"Access control lists enforce authorization based on a list of application IDs that it knows and grants a specific level of access to. When the relevant resource receives a token, it decodes it and checks it against the list of authorized clients.","title":"Access control lists"},{"location":"user-guides/subscriptions/#application-permissions","text":"For data owned by organizations, Microsoft recommends using application permissions. To use application roles with your API, you need to expose the app roles in the API's app registration, and then configure the required roles in your client's (the subscription) app registration. The user who creates a subscription will also have to create an app registration in their organization that they provide the necessary permissions.","title":"Application permissions"},{"location":"user-guides/subscriptions/#create-subscription","text":"The following command can be used to create a subscription that uses an API key and basic authentication. curl -H \"Ocp-Apim-Subscription-Key: ApiKey\" https://<bane-nor-api-endpoint>/event-issuer/v1alpha/{tenantId}/subscriptions -d '{\"applicationId\": \"my-application\", \"event\": \"event-name\", \"URL\": \"https://my-endpoint.com/events}, \"apiKey\": { \"header\": \"Ocp-Apim-Subscription-Key\", \"key\": \"API-key\" }, \"authentication\": { \"username\": \"user1\", \"password\": \"my-secure-password\" }' If only an API key is needed don't set the authentication and and only the apiKey section.","title":"Create Subscription"},{"location":"user-guides/tenants/","text":"Warning The following section is under construction Tenants \u00b6 bytter tekst","title":"Tenants"},{"location":"user-guides/tenants/#tenants","text":"bytter tekst","title":"Tenants"},{"location":"user-guides/tracing/","text":"Tracing \u00b6 Event Issuer uses Open Telemetry and will deliver a tracing value for every outgoing event. The standardized way to transmit tracing values is by following the W3 standard by using: traceparent describes the position of the incoming request in its trace graph in a portable, fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set traceparent even when it only relies on vendor-specific information in tracestate tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.","title":"Tracing"},{"location":"user-guides/tracing/#tracing","text":"Event Issuer uses Open Telemetry and will deliver a tracing value for every outgoing event. The standardized way to transmit tracing values is by following the W3 standard by using: traceparent describes the position of the incoming request in its trace graph in a portable, fixed-length format. Its design focuses on fast parsing. Every tracing tool MUST properly set traceparent even when it only relies on vendor-specific information in tracestate tracestate extends traceparent with vendor-specific data represented by a set of name/value pairs. Storing information in tracestate is optional.","title":"Tracing"}]}